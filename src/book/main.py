# generated by fastapi-codegen:
#   filename:  book-webapp-fastapi_API-specification.yaml
#   timestamp: 2022-09-06T17:09:01+00:00

from __future__ import annotations
from models import (
    Book,
    BookRequest,
    BooksBookIdDeleteResponse,
    BooksBookIdGetResponse,
    BooksBookIdGetResponse1,
    BooksBookIdGetResponse2,
    BooksBookIdPutResponse,
    BooksPostResponse,
)

from typing import List, Optional, Union
import yaml
import logging
from fastapi import FastAPI, Header, Path, APIRouter
router = APIRouter()


logger = logging.getLogger(__name__)

app = FastAPI(
    title='book-webapp-fastapi_API-specification',
    version='0.1',
    description='OpenAPI定義による図書WebアプリのAPI仕様書',
    summary='図書Webアプリのサマリ',
    contact={'name': 'fujioka', 'email': 'example.com'},
    servers=[{'url': 'http://localhost:3000'}],
)

BOOK_DATA = yaml.safe_load('./entity/bookdata.yml')


@app.post('/books', response_model=BooksPostResponse)
def post_book(
    authorization: Optional[str] = Header(None, alias='Authorization'),
    body: BookRequest = None,
) -> BooksPostResponse:
    """
    Create New Book
    """
    pass


@app.get('/books', response_model=List[Book])
def get_books(
    authorization: Optional[str] = Header(None, alias='Authorization')
) -> List[Book]:
    return BOOK_DATA


@app.get(
    '/books/{book_id}',
    response_model=Book,
    responses={
        '401': {'model': BooksBookIdGetResponse},
        '404': {'model': BooksBookIdGetResponse1},
        '500': {'model': BooksBookIdGetResponse2},
    },
)
def get_books_book_id(
    authorization: str = Header(..., alias='Authorization'),
    book_id: str = Path(..., alias='bookId'),
):
    # ) -> Union[
    #     Book, BooksBookIdGetResponse, BooksBookIdGetResponse1, BooksBookIdGetResponse2
    # ]:
    """
    Get Book Info by Book ID
    """
    logger.info(BOOK_DATA)

    id_list = [book_id['id'] for book_id in BOOK_DATA]
    if book_id not in id_list:
        return {}
    else:
        return BOOK_DATA[id_list.index(book_id)]


@app.put('/books/{book_id}', response_model=BooksBookIdPutResponse)
def put_books_book_id(
    authorization: str = Header(..., alias='Authorization'),
    book_id: str = Path(..., alias='bookId'),
    body: BookRequest = None,
) -> BooksBookIdPutResponse:
    pass


@app.delete('/books/{book_id}', response_model=BooksBookIdDeleteResponse)
def delete_books_book_id(
    authorization: str = Header(..., alias='Authorization'),
    book_id: str = Path(..., alias='bookId'),
) -> BooksBookIdDeleteResponse:
    """
    delete one books according to bookId
    """
    pass
