openapi: 3.1.0
info:
  title: book-webapp-fastapi_API-specification
  version: '0.1'
  description: OpenAPI定義による図書WebアプリのAPI仕様書
  summary: 図書Webアプリのサマリ
  contact:
    name: fujioka
    email: example.com
servers:
  - url: 'http://localhost:3000'
paths:
  '/books/{bookId}':
    parameters:
      - schema:
          type: string
        name: bookId
        in: path
        required: true
        description: Id of an existing book.
    get:
      summary: Get Book Info by Book ID
      responses:
        '200':
          description: Book Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
              examples:
                Get Book "Software Design 2022.08":
                  value:
                    id: '0001'
                    title: Software Design 2022.08
                    author: someone
                    company: 技術評論社
                    category: technology
                    country: Japan
                    publishDate: '2019-08-24'
                    createdDatetime: '2019-08-24T10:12:20Z'
                    updateddDatetime: '2019-08-24T10:12:20Z'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value:
                    status: failed
                    message: unauthorized
        '404':
          description: Book Not Found
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value:
                    status: failed
                    message: not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value:
                    status: failed
                    message: internal server error. Please wait and try agin.
                    Retry-After: '2022-08-11T10:00:00+09:00'
      operationId: get-books-bookId
      description: Retrieve the information of the book with the matching book ID.
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
          description: 'Bearer {temporarily token}'
    put:
      summary: ''
      operationId: put-books-bookId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              examples:
                example-1:
                  value:
                    status: succeeded
                    message: updatered
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      description: Update one already existing book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book-request'
            examples:
              Update one book:
                value:
                  id: '0142'
                  title: Software Design 2022.08
                  author: someone
                  company: 技術評論社
                  category: technology
                  country: Japan
                  publishDate: '2019-08-24'
                  createdDatetime: '2019-08-24T10:12:20Z'
                  updateddDatetime: '2019-08-24T10:12:20Z'
        description: Book info to update
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: 'Bearer {temporarily token}'
          required: true
    delete:
      summary: delete one books according to bookId
      operationId: delete-books-bookId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value:
                    status: succeeded
                    message: deleted
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      description: Delete a target book according to bookId
      parameters:
        - schema:
            type: string
          in: header
          description: 'Bearer {temporarily token}'
          required: true
          name: Authorization
  /books:
    post:
      summary: Create New Book
      operationId: post-book
      responses:
        '200':
          description: Book Created
          content:
            application/json:
              schema:
                type: object
              examples:
                New Book created:
                  value:
                    status: succeeded
                    message: created
        '401':
          description: Missing Required Information
        '404':
          description: Email Already Taken
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book-request'
            examples:
              Create Book Bob Fellow:
                value:
                  id: '0142'
                  title: Software Design 2022.08
                  author: someone
                  company: 技術評論社
                  category: technology
                  country: Japan
                  publishDate: '2019-08-24'
        description: Post the necessary fields for the API to create a new book.
      description: Create a new book.
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: 'Bearer {temporarily token}'
    parameters: []
    get:
      summary: ''
      operationId: get-books
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
              examples:
                example-1:
                  value:
                    - id: '0142'
                      title: Software Design 2022.08
                      author: someone
                      company: 技術評論社
                      category: technology
                      country: Japan
                      publishDate: '2019-08-24'
                      createdDatetime: '2019-08-24T10:12:20Z'
                      updateddDatetime: '2019-08-24T10:12:20Z'
                    - id: '0143'
                      title: Software Design 2022.09
                      author: someone
                      company: 技術評論社
                      category: technology
                      country: Japan
                      publishDate: '2019-09-20'
                      createdDatetime: '2019-09-20T10:12:20Z'
                      updateddDatetime: '2019-09-20T10:12:20Z'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Get a list of existing books
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: 'Bearer {example token}'
components:
  schemas:
    Book:
      title: Book
      type: object
      description: 書籍情報
      examples:
        - id: '0142'
          title: Software Design 2022.08
          author: someone
          company: 技術評論社
          category: technology
          country: Japan
          publishDate: '2019-08-24'
          createdDatetime: '2019-08-24T10:12:20Z'
          updateddDatetime: '2019-08-24T10:12:20Z'
      properties:
        id:
          type: string
          description: Unique identifier for the given book.
        title:
          type: string
        author:
          type: string
        category:
          type: string
        country:
          type: string
        publishDate:
          type: string
          format: date
          example: '2022-08-10'
          description: Set to true if the book's email has been verified.
        createdDatetime:
          type: string
          format: date-time
          description: The date that the book was created.
        updatedDatetime:
          type: string
          format: date-time
          description: The date that the book was created.
      required:
        - id
        - title
        - category
    Book-request:
      title: Book-request
      type: object
      description: 書籍情報のリクエスト
      examples:
        - id: '0142'
          title: Software Design 2022.08
          author: someone
          company: 技術評論社
          category: technology
          country: Japan
          publishDate: '2019-08-24'
      properties:
        id:
          type: string
          description: Unique identifier for the given book.
        title:
          type: string
        author:
          type: string
        category:
          type: string
        country:
          type: string
        publishDate:
          type: string
          format: date
          example: '2022-08-10'
          description: Set to true if the book's email has been verified.
      required:
        - id
        - title
        - category
  responses:
    Succeeded:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            x-examples:
              example-1:
                message: succeeded
    Unauthorized:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            x-examples:
              example-1:
                message: unauthorized
    Not-found:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            x-examples:
              example-1:
                message: not found
    Internal-server-error:
      description: Example response
      content:
        application/json:
          schema:
            $ref: ''
            x-examples:
              example-1:
                message: internal server error
                try-again: 'YYYY-MM-DD HH:MM:DD+HH:MM'
  requestBodies:
    book-info:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book-request'
